/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPayment {
  export type SwapInfoStruct = {
    poolFee: PromiseOrValue<BigNumberish>;
    secondsAgo: PromiseOrValue<BigNumberish>;
  };

  export type SwapInfoStructOutput = [number, number] & {
    poolFee: number;
    secondsAgo: number;
  };
}

export interface PaymentInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FACTORY_CONTRACT_ROLE()": FunctionFragment;
    "PAYMENT_ROLE()": FunctionFragment;
    "Payment_init(address)": FunctionFragment;
    "accessControl()": FunctionFragment;
    "cashback()": FunctionFragment;
    "getPaymentToken(uint256)": FunctionFragment;
    "getPriceWithDiscount(address,uint256,uint256,uint256)": FunctionFragment;
    "getSwapAmount(address,address,uint256)": FunctionFragment;
    "isNotUpgradeable()": FunctionFragment;
    "pay(bytes32,address,address,uint256,uint256,bytes32[],uint256[])": FunctionFragment;
    "payNative(bytes32,address,address,uint256,uint256,bytes32[],uint256[])": FunctionFragment;
    "paymentTokenSwapInfo(address)": FunctionFragment;
    "pointToken()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeUpgradeability()": FunctionFragment;
    "setAccessControl(address)": FunctionFragment;
    "setCashback(address)": FunctionFragment;
    "setPaymentTokens((uint24,uint24)[],address[],bool[])": FunctionFragment;
    "setPointToken(address)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setUniPriceOracle(address)": FunctionFragment;
    "setup(address,address,address,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "treasury()": FunctionFragment;
    "uniPriceOracle()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "FACTORY_CONTRACT_ROLE"
      | "PAYMENT_ROLE"
      | "Payment_init"
      | "accessControl"
      | "cashback"
      | "getPaymentToken"
      | "getPriceWithDiscount"
      | "getSwapAmount"
      | "isNotUpgradeable"
      | "pay"
      | "payNative"
      | "paymentTokenSwapInfo"
      | "pointToken"
      | "proxiableUUID"
      | "removeUpgradeability"
      | "setAccessControl"
      | "setCashback"
      | "setPaymentTokens"
      | "setPointToken"
      | "setTreasury"
      | "setUniPriceOracle"
      | "setup"
      | "supportsInterface"
      | "treasury"
      | "uniPriceOracle"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FACTORY_CONTRACT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Payment_init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "accessControl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cashback", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPaymentToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceWithDiscount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isNotUpgradeable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payNative",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentTokenSwapInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pointToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeUpgradeability",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccessControl",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCashback",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentTokens",
    values: [
      IPayment.SwapInfoStruct[],
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPointToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniPriceOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uniPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FACTORY_CONTRACT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Payment_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cashback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceWithDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNotUpgradeable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payNative", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokenSwapInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pointToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUpgradeability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCashback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPointToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "CashbackChanged(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Payed(address,address,bytes32,uint256,uint256)": EventFragment;
    "PaymentTokenAdded(address)": EventFragment;
    "PaymentTokenRemoved(address)": EventFragment;
    "PointTokenChanged(address)": EventFragment;
    "TreasuryChanged(address)": EventFragment;
    "UniswapPriceOracleChanged(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CashbackChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentTokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PointTokenChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniswapPriceOracleChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface CashbackChangedEventObject {
  cashback: string;
}
export type CashbackChangedEvent = TypedEvent<
  [string],
  CashbackChangedEventObject
>;

export type CashbackChangedEventFilter = TypedEventFilter<CashbackChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PayedEventObject {
  payer: string;
  paymentToken: string;
  productAlias: string;
  priceInPaymentToken: BigNumber;
  cashbackInPaymentToken: BigNumber;
}
export type PayedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  PayedEventObject
>;

export type PayedEventFilter = TypedEventFilter<PayedEvent>;

export interface PaymentTokenAddedEventObject {
  token: string;
}
export type PaymentTokenAddedEvent = TypedEvent<
  [string],
  PaymentTokenAddedEventObject
>;

export type PaymentTokenAddedEventFilter =
  TypedEventFilter<PaymentTokenAddedEvent>;

export interface PaymentTokenRemovedEventObject {
  token: string;
}
export type PaymentTokenRemovedEvent = TypedEvent<
  [string],
  PaymentTokenRemovedEventObject
>;

export type PaymentTokenRemovedEventFilter =
  TypedEventFilter<PaymentTokenRemovedEvent>;

export interface PointTokenChangedEventObject {
  pointToken: string;
}
export type PointTokenChangedEvent = TypedEvent<
  [string],
  PointTokenChangedEventObject
>;

export type PointTokenChangedEventFilter =
  TypedEventFilter<PointTokenChangedEvent>;

export interface TreasuryChangedEventObject {
  treasury: string;
}
export type TreasuryChangedEvent = TypedEvent<
  [string],
  TreasuryChangedEventObject
>;

export type TreasuryChangedEventFilter = TypedEventFilter<TreasuryChangedEvent>;

export interface UniswapPriceOracleChangedEventObject {
  uniswapPriceOracle: string;
}
export type UniswapPriceOracleChangedEvent = TypedEvent<
  [string],
  UniswapPriceOracleChangedEventObject
>;

export type UniswapPriceOracleChangedEventFilter =
  TypedEventFilter<UniswapPriceOracleChangedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Payment extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PaymentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FACTORY_CONTRACT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAYMENT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    Payment_init(
      accessControl_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    accessControl(overrides?: CallOverrides): Promise<[string]>;

    cashback(overrides?: CallOverrides): Promise<[string]>;

    getPaymentToken(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPriceWithDiscount(
      paymentToken_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      cashback_: PromiseOrValue<BigNumberish>,
      discount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getSwapAmount(
      receiveToken_: PromiseOrValue<string>,
      swapToken_: PromiseOrValue<string>,
      swapAmount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isNotUpgradeable(overrides?: CallOverrides): Promise<[boolean]>;

    pay(
      product_: PromiseOrValue<BytesLike>,
      paymentToken_: PromiseOrValue<string>,
      payer_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      cashback_: PromiseOrValue<BigNumberish>,
      discountProducts_: PromiseOrValue<BytesLike>[],
      discounts_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payNative(
      product_: PromiseOrValue<BytesLike>,
      paymentToken_: PromiseOrValue<string>,
      payer_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      cashback_: PromiseOrValue<BigNumberish>,
      discountProducts_: PromiseOrValue<BytesLike>[],
      discounts_: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paymentTokenSwapInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { poolFee: number; secondsAgo: number }>;

    pointToken(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeUpgradeability(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAccessControl(
      accessControl_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCashback(
      cashback_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentTokens(
      swapInfos_: IPayment.SwapInfoStruct[],
      tokens_: PromiseOrValue<string>[],
      statuses_: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPointToken(
      pointToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      treasury_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUniPriceOracle(
      uniPriceOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setup(
      pointToken_: PromiseOrValue<string>,
      cashback_: PromiseOrValue<string>,
      treasury_: PromiseOrValue<string>,
      uniPriceOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    uniPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  FACTORY_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

  PAYMENT_ROLE(overrides?: CallOverrides): Promise<string>;

  Payment_init(
    accessControl_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  accessControl(overrides?: CallOverrides): Promise<string>;

  cashback(overrides?: CallOverrides): Promise<string>;

  getPaymentToken(
    index_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPriceWithDiscount(
    paymentToken_: PromiseOrValue<string>,
    price_: PromiseOrValue<BigNumberish>,
    cashback_: PromiseOrValue<BigNumberish>,
    discount_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getSwapAmount(
    receiveToken_: PromiseOrValue<string>,
    swapToken_: PromiseOrValue<string>,
    swapAmount_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isNotUpgradeable(overrides?: CallOverrides): Promise<boolean>;

  pay(
    product_: PromiseOrValue<BytesLike>,
    paymentToken_: PromiseOrValue<string>,
    payer_: PromiseOrValue<string>,
    price_: PromiseOrValue<BigNumberish>,
    cashback_: PromiseOrValue<BigNumberish>,
    discountProducts_: PromiseOrValue<BytesLike>[],
    discounts_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payNative(
    product_: PromiseOrValue<BytesLike>,
    paymentToken_: PromiseOrValue<string>,
    payer_: PromiseOrValue<string>,
    price_: PromiseOrValue<BigNumberish>,
    cashback_: PromiseOrValue<BigNumberish>,
    discountProducts_: PromiseOrValue<BytesLike>[],
    discounts_: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paymentTokenSwapInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, number] & { poolFee: number; secondsAgo: number }>;

  pointToken(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeUpgradeability(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAccessControl(
    accessControl_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCashback(
    cashback_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentTokens(
    swapInfos_: IPayment.SwapInfoStruct[],
    tokens_: PromiseOrValue<string>[],
    statuses_: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPointToken(
    pointToken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    treasury_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUniPriceOracle(
    uniPriceOracle_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setup(
    pointToken_: PromiseOrValue<string>,
    cashback_: PromiseOrValue<string>,
    treasury_: PromiseOrValue<string>,
    uniPriceOracle_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  treasury(overrides?: CallOverrides): Promise<string>;

  uniPriceOracle(overrides?: CallOverrides): Promise<string>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FACTORY_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

    PAYMENT_ROLE(overrides?: CallOverrides): Promise<string>;

    Payment_init(
      accessControl_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    accessControl(overrides?: CallOverrides): Promise<string>;

    cashback(overrides?: CallOverrides): Promise<string>;

    getPaymentToken(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPriceWithDiscount(
      paymentToken_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      cashback_: PromiseOrValue<BigNumberish>,
      discount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getSwapAmount(
      receiveToken_: PromiseOrValue<string>,
      swapToken_: PromiseOrValue<string>,
      swapAmount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNotUpgradeable(overrides?: CallOverrides): Promise<boolean>;

    pay(
      product_: PromiseOrValue<BytesLike>,
      paymentToken_: PromiseOrValue<string>,
      payer_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      cashback_: PromiseOrValue<BigNumberish>,
      discountProducts_: PromiseOrValue<BytesLike>[],
      discounts_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    payNative(
      product_: PromiseOrValue<BytesLike>,
      paymentToken_: PromiseOrValue<string>,
      payer_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      cashback_: PromiseOrValue<BigNumberish>,
      discountProducts_: PromiseOrValue<BytesLike>[],
      discounts_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    paymentTokenSwapInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { poolFee: number; secondsAgo: number }>;

    pointToken(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeUpgradeability(overrides?: CallOverrides): Promise<void>;

    setAccessControl(
      accessControl_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCashback(
      cashback_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentTokens(
      swapInfos_: IPayment.SwapInfoStruct[],
      tokens_: PromiseOrValue<string>[],
      statuses_: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPointToken(
      pointToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(
      treasury_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniPriceOracle(
      uniPriceOracle_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setup(
      pointToken_: PromiseOrValue<string>,
      cashback_: PromiseOrValue<string>,
      treasury_: PromiseOrValue<string>,
      uniPriceOracle_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    treasury(overrides?: CallOverrides): Promise<string>;

    uniPriceOracle(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "CashbackChanged(address)"(cashback?: null): CashbackChangedEventFilter;
    CashbackChanged(cashback?: null): CashbackChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Payed(address,address,bytes32,uint256,uint256)"(
      payer?: PromiseOrValue<string> | null,
      paymentToken?: null,
      productAlias?: null,
      priceInPaymentToken?: null,
      cashbackInPaymentToken?: null
    ): PayedEventFilter;
    Payed(
      payer?: PromiseOrValue<string> | null,
      paymentToken?: null,
      productAlias?: null,
      priceInPaymentToken?: null,
      cashbackInPaymentToken?: null
    ): PayedEventFilter;

    "PaymentTokenAdded(address)"(token?: null): PaymentTokenAddedEventFilter;
    PaymentTokenAdded(token?: null): PaymentTokenAddedEventFilter;

    "PaymentTokenRemoved(address)"(
      token?: null
    ): PaymentTokenRemovedEventFilter;
    PaymentTokenRemoved(token?: null): PaymentTokenRemovedEventFilter;

    "PointTokenChanged(address)"(
      pointToken?: null
    ): PointTokenChangedEventFilter;
    PointTokenChanged(pointToken?: null): PointTokenChangedEventFilter;

    "TreasuryChanged(address)"(treasury?: null): TreasuryChangedEventFilter;
    TreasuryChanged(treasury?: null): TreasuryChangedEventFilter;

    "UniswapPriceOracleChanged(address)"(
      uniswapPriceOracle?: null
    ): UniswapPriceOracleChangedEventFilter;
    UniswapPriceOracleChanged(
      uniswapPriceOracle?: null
    ): UniswapPriceOracleChangedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FACTORY_CONTRACT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMENT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    Payment_init(
      accessControl_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    accessControl(overrides?: CallOverrides): Promise<BigNumber>;

    cashback(overrides?: CallOverrides): Promise<BigNumber>;

    getPaymentToken(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceWithDiscount(
      paymentToken_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      cashback_: PromiseOrValue<BigNumberish>,
      discount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapAmount(
      receiveToken_: PromiseOrValue<string>,
      swapToken_: PromiseOrValue<string>,
      swapAmount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNotUpgradeable(overrides?: CallOverrides): Promise<BigNumber>;

    pay(
      product_: PromiseOrValue<BytesLike>,
      paymentToken_: PromiseOrValue<string>,
      payer_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      cashback_: PromiseOrValue<BigNumberish>,
      discountProducts_: PromiseOrValue<BytesLike>[],
      discounts_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payNative(
      product_: PromiseOrValue<BytesLike>,
      paymentToken_: PromiseOrValue<string>,
      payer_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      cashback_: PromiseOrValue<BigNumberish>,
      discountProducts_: PromiseOrValue<BytesLike>[],
      discounts_: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paymentTokenSwapInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pointToken(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeUpgradeability(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAccessControl(
      accessControl_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCashback(
      cashback_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentTokens(
      swapInfos_: IPayment.SwapInfoStruct[],
      tokens_: PromiseOrValue<string>[],
      statuses_: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPointToken(
      pointToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasury(
      treasury_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUniPriceOracle(
      uniPriceOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setup(
      pointToken_: PromiseOrValue<string>,
      cashback_: PromiseOrValue<string>,
      treasury_: PromiseOrValue<string>,
      uniPriceOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    uniPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FACTORY_CONTRACT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMENT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Payment_init(
      accessControl_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    accessControl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cashback(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPaymentToken(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceWithDiscount(
      paymentToken_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      cashback_: PromiseOrValue<BigNumberish>,
      discount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapAmount(
      receiveToken_: PromiseOrValue<string>,
      swapToken_: PromiseOrValue<string>,
      swapAmount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNotUpgradeable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pay(
      product_: PromiseOrValue<BytesLike>,
      paymentToken_: PromiseOrValue<string>,
      payer_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      cashback_: PromiseOrValue<BigNumberish>,
      discountProducts_: PromiseOrValue<BytesLike>[],
      discounts_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payNative(
      product_: PromiseOrValue<BytesLike>,
      paymentToken_: PromiseOrValue<string>,
      payer_: PromiseOrValue<string>,
      price_: PromiseOrValue<BigNumberish>,
      cashback_: PromiseOrValue<BigNumberish>,
      discountProducts_: PromiseOrValue<BytesLike>[],
      discounts_: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paymentTokenSwapInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pointToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeUpgradeability(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAccessControl(
      accessControl_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCashback(
      cashback_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentTokens(
      swapInfos_: IPayment.SwapInfoStruct[],
      tokens_: PromiseOrValue<string>[],
      statuses_: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPointToken(
      pointToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      treasury_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUniPriceOracle(
      uniPriceOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setup(
      pointToken_: PromiseOrValue<string>,
      cashback_: PromiseOrValue<string>,
      treasury_: PromiseOrValue<string>,
      uniPriceOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
