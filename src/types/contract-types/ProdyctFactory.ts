/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ProdyctFactoryInterface extends utils.Interface {
  functions: {
    "ProductFactory_init()": FunctionFragment;
    "__ProductFactoryConfig_init()": FunctionFragment;
    "addProduct(bytes32)": FunctionFragment;
    "deploy(bytes32,address,bytes)": FunctionFragment;
    "getCashback(bytes32)": FunctionFragment;
    "getNewPrice(bytes32)": FunctionFragment;
    "getPotentialContractAddress(bytes32,bytes)": FunctionFragment;
    "getProducts()": FunctionFragment;
    "owner()": FunctionFragment;
    "payment()": FunctionFragment;
    "products(bytes32)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setImplementation(bytes32,address)": FunctionFragment;
    "setPayment(address)": FunctionFragment;
    "setPercents(bytes32,uint128,uint128)": FunctionFragment;
    "setPrices(bytes32,uint256,uint256)": FunctionFragment;
    "setStatus(bytes32,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ProductFactory_init"
      | "__ProductFactoryConfig_init"
      | "addProduct"
      | "deploy"
      | "getCashback"
      | "getNewPrice"
      | "getPotentialContractAddress"
      | "getProducts"
      | "owner"
      | "payment"
      | "products"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setImplementation"
      | "setPayment"
      | "setPercents"
      | "setPrices"
      | "setStatus"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ProductFactory_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__ProductFactoryConfig_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addProduct",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCashback",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewPrice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPotentialContractAddress",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProducts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payment", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementation",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayment",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPercents",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrices",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStatus",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ProductFactory_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__ProductFactoryConfig_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCashback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPotentialContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPercents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Deployed(address,address,uint256,uint256)": EventFragment;
    "ImplementationChanged(bytes32,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentChanged(address)": EventFragment;
    "PercentsChanged(bytes32,uint256,uint256)": EventFragment;
    "PricesChanged(bytes32,uint256,uint256)": EventFragment;
    "ProductAdded(bytes32)": EventFragment;
    "StatusChanged(bytes32,bool)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImplementationChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PercentsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PricesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DeployedEventObject {
  proxy: string;
  paymentToken: string;
  price: BigNumber;
  cashback: BigNumber;
}
export type DeployedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DeployedEventObject
>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export interface ImplementationChangedEventObject {
  productAlias: string;
  implementation: string;
}
export type ImplementationChangedEvent = TypedEvent<
  [string, string],
  ImplementationChangedEventObject
>;

export type ImplementationChangedEventFilter =
  TypedEventFilter<ImplementationChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PaymentChangedEventObject {
  payment: string;
}
export type PaymentChangedEvent = TypedEvent<
  [string],
  PaymentChangedEventObject
>;

export type PaymentChangedEventFilter = TypedEventFilter<PaymentChangedEvent>;

export interface PercentsChangedEventObject {
  productAlias: string;
  decreasePercent: BigNumber;
  cashbackPercent: BigNumber;
}
export type PercentsChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PercentsChangedEventObject
>;

export type PercentsChangedEventFilter = TypedEventFilter<PercentsChangedEvent>;

export interface PricesChangedEventObject {
  productAlias: string;
  currentPrice: BigNumber;
  minPrice: BigNumber;
}
export type PricesChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PricesChangedEventObject
>;

export type PricesChangedEventFilter = TypedEventFilter<PricesChangedEvent>;

export interface ProductAddedEventObject {
  productAlias: string;
}
export type ProductAddedEvent = TypedEvent<[string], ProductAddedEventObject>;

export type ProductAddedEventFilter = TypedEventFilter<ProductAddedEvent>;

export interface StatusChangedEventObject {
  productAlias: string;
  status: boolean;
}
export type StatusChangedEvent = TypedEvent<
  [string, boolean],
  StatusChangedEventObject
>;

export type StatusChangedEventFilter = TypedEventFilter<StatusChangedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ProdyctFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProdyctFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ProductFactory_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    __ProductFactoryConfig_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addProduct(
      alias_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deploy(
      alias_: PromiseOrValue<BytesLike>,
      paymentToken_: PromiseOrValue<string>,
      initializeData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCashback(
      alias_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNewPrice(
      alias_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPotentialContractAddress(
      alias_: PromiseOrValue<BytesLike>,
      initializeData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProducts(overrides?: CallOverrides): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payment(overrides?: CallOverrides): Promise<[string]>;

    products(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        currentPrice: BigNumber;
        minPrice: BigNumber;
        decreasePercent: BigNumber;
        cashbackPercent: BigNumber;
        salesCount: BigNumber;
        isActive: boolean;
        implementation: string;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setImplementation(
      alias_: PromiseOrValue<BytesLike>,
      implementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPayment(
      payment_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPercents(
      alias_: PromiseOrValue<BytesLike>,
      decreasePercent_: PromiseOrValue<BigNumberish>,
      cashbackPercent_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrices(
      alias_: PromiseOrValue<BytesLike>,
      currentPrice_: PromiseOrValue<BigNumberish>,
      minPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStatus(
      alias_: PromiseOrValue<BytesLike>,
      isActive_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ProductFactory_init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  __ProductFactoryConfig_init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addProduct(
    alias_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deploy(
    alias_: PromiseOrValue<BytesLike>,
    paymentToken_: PromiseOrValue<string>,
    initializeData_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCashback(
    alias_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNewPrice(
    alias_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPotentialContractAddress(
    alias_: PromiseOrValue<BytesLike>,
    initializeData_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getProducts(overrides?: CallOverrides): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  payment(overrides?: CallOverrides): Promise<string>;

  products(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
      currentPrice: BigNumber;
      minPrice: BigNumber;
      decreasePercent: BigNumber;
      cashbackPercent: BigNumber;
      salesCount: BigNumber;
      isActive: boolean;
      implementation: string;
    }
  >;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setImplementation(
    alias_: PromiseOrValue<BytesLike>,
    implementation_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPayment(
    payment_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPercents(
    alias_: PromiseOrValue<BytesLike>,
    decreasePercent_: PromiseOrValue<BigNumberish>,
    cashbackPercent_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrices(
    alias_: PromiseOrValue<BytesLike>,
    currentPrice_: PromiseOrValue<BigNumberish>,
    minPrice_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStatus(
    alias_: PromiseOrValue<BytesLike>,
    isActive_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ProductFactory_init(overrides?: CallOverrides): Promise<void>;

    __ProductFactoryConfig_init(overrides?: CallOverrides): Promise<void>;

    addProduct(
      alias_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    deploy(
      alias_: PromiseOrValue<BytesLike>,
      paymentToken_: PromiseOrValue<string>,
      initializeData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCashback(
      alias_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewPrice(
      alias_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPotentialContractAddress(
      alias_: PromiseOrValue<BytesLike>,
      initializeData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProducts(overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    payment(overrides?: CallOverrides): Promise<string>;

    products(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        currentPrice: BigNumber;
        minPrice: BigNumber;
        decreasePercent: BigNumber;
        cashbackPercent: BigNumber;
        salesCount: BigNumber;
        isActive: boolean;
        implementation: string;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setImplementation(
      alias_: PromiseOrValue<BytesLike>,
      implementation_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPayment(
      payment_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPercents(
      alias_: PromiseOrValue<BytesLike>,
      decreasePercent_: PromiseOrValue<BigNumberish>,
      cashbackPercent_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrices(
      alias_: PromiseOrValue<BytesLike>,
      currentPrice_: PromiseOrValue<BigNumberish>,
      minPrice_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStatus(
      alias_: PromiseOrValue<BytesLike>,
      isActive_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Deployed(address,address,uint256,uint256)"(
      proxy?: PromiseOrValue<string> | null,
      paymentToken?: null,
      price?: null,
      cashback?: null
    ): DeployedEventFilter;
    Deployed(
      proxy?: PromiseOrValue<string> | null,
      paymentToken?: null,
      price?: null,
      cashback?: null
    ): DeployedEventFilter;

    "ImplementationChanged(bytes32,address)"(
      productAlias?: null,
      implementation?: null
    ): ImplementationChangedEventFilter;
    ImplementationChanged(
      productAlias?: null,
      implementation?: null
    ): ImplementationChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PaymentChanged(address)"(payment?: null): PaymentChangedEventFilter;
    PaymentChanged(payment?: null): PaymentChangedEventFilter;

    "PercentsChanged(bytes32,uint256,uint256)"(
      productAlias?: null,
      decreasePercent?: null,
      cashbackPercent?: null
    ): PercentsChangedEventFilter;
    PercentsChanged(
      productAlias?: null,
      decreasePercent?: null,
      cashbackPercent?: null
    ): PercentsChangedEventFilter;

    "PricesChanged(bytes32,uint256,uint256)"(
      productAlias?: null,
      currentPrice?: null,
      minPrice?: null
    ): PricesChangedEventFilter;
    PricesChanged(
      productAlias?: null,
      currentPrice?: null,
      minPrice?: null
    ): PricesChangedEventFilter;

    "ProductAdded(bytes32)"(productAlias?: null): ProductAddedEventFilter;
    ProductAdded(productAlias?: null): ProductAddedEventFilter;

    "StatusChanged(bytes32,bool)"(
      productAlias?: null,
      status?: null
    ): StatusChangedEventFilter;
    StatusChanged(productAlias?: null, status?: null): StatusChangedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    ProductFactory_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    __ProductFactoryConfig_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addProduct(
      alias_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deploy(
      alias_: PromiseOrValue<BytesLike>,
      paymentToken_: PromiseOrValue<string>,
      initializeData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCashback(
      alias_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewPrice(
      alias_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPotentialContractAddress(
      alias_: PromiseOrValue<BytesLike>,
      initializeData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProducts(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payment(overrides?: CallOverrides): Promise<BigNumber>;

    products(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setImplementation(
      alias_: PromiseOrValue<BytesLike>,
      implementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPayment(
      payment_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPercents(
      alias_: PromiseOrValue<BytesLike>,
      decreasePercent_: PromiseOrValue<BigNumberish>,
      cashbackPercent_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrices(
      alias_: PromiseOrValue<BytesLike>,
      currentPrice_: PromiseOrValue<BigNumberish>,
      minPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStatus(
      alias_: PromiseOrValue<BytesLike>,
      isActive_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ProductFactory_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    __ProductFactoryConfig_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addProduct(
      alias_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deploy(
      alias_: PromiseOrValue<BytesLike>,
      paymentToken_: PromiseOrValue<string>,
      initializeData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCashback(
      alias_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewPrice(
      alias_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPotentialContractAddress(
      alias_: PromiseOrValue<BytesLike>,
      initializeData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProducts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    products(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setImplementation(
      alias_: PromiseOrValue<BytesLike>,
      implementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPayment(
      payment_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPercents(
      alias_: PromiseOrValue<BytesLike>,
      decreasePercent_: PromiseOrValue<BigNumberish>,
      cashbackPercent_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrices(
      alias_: PromiseOrValue<BytesLike>,
      currentPrice_: PromiseOrValue<BigNumberish>,
      minPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStatus(
      alias_: PromiseOrValue<BytesLike>,
      isActive_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
